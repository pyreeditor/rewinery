@using Rewinery.Client.Infrastructure.HttpWines
@using Rewinery.Shared.WineGroup.Category
@using Rewinery.Shared.WineGroup.Ingredient
@using Rewinery.Shared.WineGroup.Subcategory

@inject HttpCategoryRepository _httpCategory;
@inject HttpSubcategoryRepository _httpSubcategory;
@inject HttpIngredientRepository _httpIngredient

<div class="filter-bar">
    <MudList Clickable="true" Style="width: 80%; margin-left: 10%; padding-top: 10%">
        <MudSelect T="string" Label="Wine type" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="categoriesOptions" Class="pb-10">
            @if (categories != null)
            {
                @foreach (var category in categories)
                {
                    <MudSelectItem T="string" Value="@category.Name">@category.Name</MudSelectItem>
                }
            }
        </MudSelect>
        <MudSelect T="string" Label="Wine variety" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="subcategoriesOptions" Class="pb-10">
            @if (subcategories != null)
            {
                @foreach (var subcategory in subcategories)
                {
                    <MudSelectItem T="string" Value="@subcategory.Name">@subcategory.Name</MudSelectItem>
                }
            }
        </MudSelect>
        <MudSelect T="string" Label="Ingredients" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="ingredientsOptions" Class="pb-10">
            @if (ingredients != null)
            {
                @foreach (var ingredient in ingredients)
                {
                    <MudSelectItem T="string" Value="@ingredient.Name">@ingredient.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </MudList>
</div>

@code {
    private string? value { get; set; } = null;
    private IEnumerable<string> categoriesOptions { get; set; } = new HashSet<string>();
    private IEnumerable<string> subcategoriesOptions { get; set; } = new HashSet<string>();
    private IEnumerable<string> ingredientsOptions { get; set; } = new HashSet<string>();

    public IEnumerable<CategoryDto>? categories;
    public IEnumerable<SubcategoryDto>? subcategories;
    public IEnumerable<IngredientDto>? ingredients;

    protected override async Task OnInitializedAsync()
    {
        categories = await _httpCategory.GetAllAsync();
        subcategories = await _httpSubcategory.GetAllAsync();
        ingredients = await _httpIngredient.GetAllAsync();
    }
}